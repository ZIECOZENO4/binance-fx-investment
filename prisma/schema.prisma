datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  balance         Float?
  investBalance   Float?
  payments        Payment[]
  withdrawals     Withdrawal[]
  outinvest       OutInvest[]
  deposits        Deposit[]
  coins           UserCoin[]
}

model Coin {
  id        String     @id @default(cuid())
  name      String
  symbol    String     @unique
  image     String
  marketCap Float @default(0)
  users     UserCoin[]
}

model UserCoin {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  coin      Coin     @relation(fields: [coinId], references: [id])
  coinId    String
  amount    Float
  usdtValue Float

  @@id([userId, coinId])
}

model Payment {
  id        String   @id @default(cuid())
  amount    String
  coin      String
  plan      String
  planId    String
  time      DateTime @default(now())
  balance   String
  gasFee    String
  userId    String   @map("user_id")
  totalValueInUSDT String?
  userName  String
  user      User     @relation(fields: [userId], references: [id])
  confirmed Boolean  @default(false)
}

model Withdrawal {
  id            String   @id @default(cuid())
  amount        String
  coin          String
  walletAddress String
  time          DateTime @default(now())
  gasFee        String
  userId        String   @map("user_id")
  userName      String
  totalValueInUSDT String?
  user          User     @relation(fields: [userId], references: [id])
  confirmed     Boolean  @default(false)
}

model OutInvest {
  id              String   @id @default(cuid())
  time            DateTime @default(now())
  walletAddress   String
  userId          String   @map("user_id")
  gasFee          String   @default("0.00 wei")
  userName        String
  outCoin         String?
  outAmount       String?
  totalValueInUSDT String?
  user            User     @relation(fields: [userId], references: [id])
  confirmed       Boolean  @default(false)
}

model Deposit {
  id                      String   @id @default(cuid())
  depositorTransactionId  String
  time                    DateTime @default(now())
  depositorWalletAddress  String
  userId                  String   @map("user_id")
  user                    User     @relation(fields: [userId], references: [id])
  depositorAmount         String
  depositorName           String
  totalValueInUSDT String?
  depositorCoin           String
  confirmed               Boolean  @default(false)
}
