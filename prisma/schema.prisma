

datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

generator client {
 provider = "prisma-client-js"
}

model User {
 id          String         @id @default(cuid())
 email       String         @unique
 name        String?
 image       String?
 createdAt   DateTime       @default(now())
 updatedAt   DateTime       @updatedAt
 balance     Float?
 payments    Payment[]     
 withdrawals       Withdrawal[] 
 outinvest   OutInvest[]
deposits    Deposit[]
customcoins CustomCoin[]
  referrerId      String?  @map("referrer_id")
  referralBalance Float    @default(0)
  referrals       User[]   @relation("UserReferrals", fields: [referrerId], references: [id])
  referrer        User?    @relation("UserReferrals", fields: [referrerId], references: [id])
}

model Payment {
 id          String         @id @default(cuid())
 amount      String
 coin        String
 plan        String
 planId      String
 time        DateTime       @default(now())
 balance     String
 gasFee      String
 userId      String         @map("user_id")
 userName    String        
 user        User           @relation(fields: [userId], references: [id])
  confirmed    Boolean        @default(false) 
}



model Withdrawal {
 id          String         @id @default(cuid())
 amount      String
 coin        String
 walletAddress String
 time        DateTime       @default(now())
 gasFee      String
 userId      String         @map("user_id")
 userName    String         // New field to store the user's name
 user        User           @relation(fields: [userId], references: [id])
  confirmed    Boolean        @default(false) 
}


model OutInvest {
 id          String         @id @default(cuid())
 time        DateTime       @default(now())
 walletAddress String
 userId      String         @map("user_id")
  gasFee      String
 userName    String    
outCoin      String?
outAmount    String?
 user        User           @relation(fields: [userId], references: [id])
  confirmed    Boolean        @default(false) 
}

model Deposit {
 id          String         @id @default(cuid())
 depositorTransactionId     String
 time        DateTime       @default(now())
 depositorWalletAddress String
 userId      String         @map("user_id") 
 user        User           @relation(fields: [userId], references: [id])
 depositorAmount String
 depositorName   String
 depositorCoin String
 confirmed    Boolean        @default(false) 
}

model CustomCoin {
 id        String   @id @default(cuid())
 name      String
 imageUrl String
 usdValue Float
 rank      Int
 user      User     @relation(fields: [userId], references: [id])
 userId    String   @map("user_id")
balance    Float    @default(0.00)
confirmed    Boolean        @default(false) 
}